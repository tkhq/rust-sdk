syntax = "proto3";

package immutable.models.v1;

import "immutable/common/v1/common.proto";

option go_package = "github.com/tkhq/mono/src/go/gen/pkg/immutable/models/v1";

// These messages are considered immutable because:
// 1. The payload and signature values are stored in traditional DB columns
// 2. The signatures are created by signing a digest of the payload
// 3. Modifying the payload (e.g. adding or removing fields) will invalidate all stored signatures

message MerkleNode {
  uint64 id = 1;
  // Contains a digest (i.e. hash)
  // For a leaf node, this would be organization_digest from from the associated notarization.
  // For a none-leaf node (i.e. an intermediate node or the root), this would be the computed digest of the children.
  bytes value = 2;
}

message MerkleRootPayload {
  MerkleNode node = 1;
  uint64 timestamp = 2;
}

message MerkleRoot {
  MerkleRootPayload payload = 1;
  // Notarizer signature over hash(payload)
  Signature signature = 2;
}

message MerkleLeafPayload {
  MerkleNode node = 1;
  uint64 timestamp = 2;
  // The UUID of the organization
  string organization_id = 3;
}

// NOTE: The MerkleLeaf itself needs to be signed, rather than simply relying on the signature of its assocaited Notarization.
// The purpose of this is to make the `MerkleLeafPayload.timestamp` immutable, so that it can be used by the Ump to verify the relative age of leaf and notarization.
message MerkleLeaf {
  MerkleLeafPayload payload = 1;
  // Notarizer signature over hash(payload)
  Signature signature = 2;
}

message MerkleProof {
  MerkleRoot root = 1;
  repeated MerkleNode nodes = 2;
  repeated MerkleLeaf leaves = 3;
}

message MerkleLeafNotarization {
  MerkleLeaf leaf = 1;
  Notarization notarization = 2;
}

// The original version of AccountPayload used for signature verification.
// This version did not contain the `exported` or `public_key` fields.
// All signatures created using this version must continue to verify using only these fields.
message AccountPayloadV0 {
  string organization_id = 1;
  string wallet_id = 2;
  immutable.common.v1.Curve curve = 3;
  immutable.common.v1.PathFormat path_format = 4;
  string path = 5;
  immutable.common.v1.AddressFormat address_format = 6;
  string address = 7;
}

// Introduced the `exported` field to indicate whether the account was externally exported.
// This broke compatibility with signatures generated using V0, so we retain both versions.
message AccountPayloadV1 {
  string organization_id = 1;
  string wallet_id = 2;
  immutable.common.v1.Curve curve = 3;
  immutable.common.v1.PathFormat path_format = 4;
  string path = 5;
  immutable.common.v1.AddressFormat address_format = 6;
  string address = 7;
  bool exported = 8;
}

// Introduced `public_key` (optional) field to support embedding the public key.
// This is the canonical and current version for new signatures.
// Older versions (V0, V1) are still supported for signature verification fallback.
message AccountPayloadV2 {
  string organization_id = 1;
  string wallet_id = 2;
  immutable.common.v1.Curve curve = 3;
  immutable.common.v1.PathFormat path_format = 4;
  string path = 5;
  immutable.common.v1.AddressFormat address_format = 6;
  string address = 7;
  bool exported = 8;
  optional string public_key = 9;
}

// The signed wrapper containing a payload (currently AccountPayloadV2)
// and its corresponding cryptographic signature.
// Signature is created over the digest of the payload message.
message Account {
  AccountPayloadV2 payload = 1;
  // Signer signature over hash(payload)
  Signature signature = 2;
}

message NotarizationPayload {
  // Hash of the organization data
  string organization_digest = 1;
  // Hash of the previous notarization; used to verify notarization digest
  string previous_notarization_digest = 2;
  // Used to verifiy notarization hash and recency requirements
  // This timestamp is in ms, in UTC. It comes directly from the NSM.
  uint64 timestamp = 3;
  // The serialized organization version used to calculate the digest
  string organization_data_version = 4;
  // The UUID of the organization
  string organization_id = 5;
}

message Notarization {
  NotarizationPayload payload = 8;
  // Notarizer signature over hash(payload)
  Signature signature = 7;
}

// while not technically immutable, this felt like the logical place to put this for now
message NotarizedOrganization {
  bytes data_bytes = 1;
  immutable.models.v1.Notarization notarization = 2;
  MerkleProof merkle_proof = 3;
}

enum SignatureScheme {
  SIGNATURE_SCHEME_UNSPECIFIED = 0;
  // Scheme used for Turnkey's public API
  SIGNATURE_SCHEME_TK_API_P256 = 1;
  // Scheme used on our UI when users sign with Webauthn
  // Public keys are encoded using COSE (https://www.w3.org/TR/webauthn-2/#sctn-encoded-credPubKey-examples)
  SIGNATURE_SCHEME_TK_WEBAUTHN = 2;
  // Scheme used by our enclave applications
  SIGNATURE_SCHEME_TK_QUORUM_P256 = 3;
  // Scheme used for Turnkey's public API
  SIGNATURE_SCHEME_TK_API_SECP256K1 = 4;
  // Scheme used for Turnkey's public API
  SIGNATURE_SCHEME_TK_API_ED25519 = 5;
  // Scheme used for Ethereum wallet signatures
  SIGNATURE_SCHEME_TK_API_SECP256K1_EIP191 = 6;
}

message Signature {
  SignatureScheme scheme = 1;
  string public_key = 2;
  string message = 3;
  string signature = 4;
}

message SmartContractInterfacePayload {
  string smart_contract_interface_id = 1;
  string organization_id = 2;
  string smart_contract_address = 3; // for smart contract addresses and program IDs
  string smart_contract_interface = 4; // JSON string for an ABI or IDL
  immutable.common.v1.SmartContractInterfaceType type = 5;
  string label = 6;
  string notes = 7;
}

message SmartContractInterface {
  SmartContractInterfacePayload payload = 1;
  // Signer signature over hash(payload)
  Signature signature = 2;
}
