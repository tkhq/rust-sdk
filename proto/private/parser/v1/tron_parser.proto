syntax = "proto3";

package private.parser.v1;

import "immutable/models/v1/models.proto";
import "tron/Tron.proto";

option go_package = "github.com/tkhq/mono/src/go/gen/pkg/private/parser/v1";

message TronParseResponse {
  TronParsedTransactionPayload payload = 1;
  immutable.models.v1.Signature signature = 2;
}

message TronParsedTransaction {
  TronParsedTransactionPayload payload = 1;
  immutable.models.v1.Signature signature = 2;
}

message TronParsedTransactionPayload {
  TronMetadata transaction_metadata = 1;
  string unsigned_payload = 2;
}

message TronMetadata {
  repeated TronContract contract = 1;
  bytes ref_block_bytes = 2;
  bytes ref_block_hash = 3;
  int64 expiration = 4;
  bytes data = 5;
  int64 timestamp = 6;
  int64 fee_limit = 7;
}

message TronContract {
  protocol.Transaction.Contract.ContractType type = 1;
  bytes provider = 2;
  bytes contract_name = 3;
  int32 permission_id = 4;
  // this enum is needed so that the TronContract message can be properly borsh serialized down the line
  oneof contract {
    // ToDo: need to find out why protocol.TransferContract doesnt work but using a native message to this file, TransferContract, works
    // this would be nice to fully vendor the contract definition files
    // protocol.TransferContract transfer_contract = 5;
    // protocol.TriggerSmartContract trigger_smart_contract = 6;
    TransferContract transfer_contract = 5;
    TriggerSmartContract trigger_smart_contract = 6;
    DelegateResourceContract delegate_resource_contract = 7;
    UnDelegateResourceContract un_delegate_resource_contract = 8;
    FreezeBalanceV2Contract freeze_balance_v2_contract = 9;
    UnfreezeBalanceV2Contract unfreeze_balance_v2_contract = 10;
    AccountPermissionUpdateContract account_permission_update_contract = 11;
  }
}

message TransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 amount = 3;
}

message TriggerSmartContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 call_value = 3;
  bytes data = 4;
  int64 call_token_value = 5;
  int64 token_id = 6;
}

// buf:lint:ignore ENUM_VALUE_PREFIX
// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
enum ResourceCode {
  BANDWIDTH = 0x00;
  ENERGY = 0x01;
  TRON_POWER = 0x02;
}

message DelegateResourceContract {
  bytes owner_address = 1;
  ResourceCode resource = 2;
  int64 balance = 3;
  bytes receiver_address = 4;
  bool lock = 5;
  int64 lock_period = 6;
}

message UnDelegateResourceContract {
  bytes owner_address = 1;
  ResourceCode resource = 2;
  int64 balance = 3;
  bytes receiver_address = 4;
}

message FreezeBalanceV2Contract {
  bytes owner_address = 1;
  int64 frozen_balance = 2;
  ResourceCode resource = 3;
}

message UnfreezeBalanceV2Contract {
  bytes owner_address = 1;
  int64 unfreeze_balance = 2;
  ResourceCode resource = 3;
}

message AccountPermissionUpdateContract {
  bytes owner_address = 1;
  Permission owner = 2; //Empty is invalidate
  Permission witness = 3; //Can be empty
  repeated Permission actives = 4; //Empty is invalidate
}

message Permission {
  // buf:lint:ignore ENUM_VALUE_PREFIX
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
  enum PermissionType {
    Owner = 0;
    Witness = 1;
    Active = 2;
  }
  PermissionType type = 1;
  int32 id = 2; //Owner id=0, Witness id=1, Active id start by 2
  string permission_name = 3;
  int64 threshold = 4;
  int32 parent_id = 5;
  bytes operations = 6; //1 bit 1 contract
  repeated Key keys = 7;
}

message Key {
  bytes address = 1;
  int64 weight = 2;
}
