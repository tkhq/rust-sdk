#[derive(Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq)]
pub struct Timestamp {
    pub seconds: ::prost::alloc::string::String,
    pub nanos: ::prost::alloc::string::String,
}
#[derive(Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq)]
pub struct Credential {
    pub public_key: ::prost::alloc::string::String,
    pub r#type: super::super::common::v1::CredentialType,
}
#[derive(Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq)]
pub struct Quorum {
    #[serde(default)]
    pub threshold: i32,
    #[serde(default)]
    pub user_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Debug)]
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq)]
pub struct Feature {
    pub name: super::super::common::v1::FeatureName,
    #[serde(default)]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Debug)]
/// A reference to a Smart Contract Interface (ABI or IDL), to be stored within Org Data.
/// We intentionally store a reference, and not the entire smart contract interface, as
/// ABIs/IDLs are JSON objects and can be up to several hundred kb in size.
#[derive(::serde::Serialize, ::serde::Deserialize)]
#[serde(rename_all = "camelCase")]
#[derive(Clone, PartialEq)]
pub struct SmartContractInterfaceReference {
    pub smart_contract_interface_id: ::prost::alloc::string::String,
    pub smart_contract_address: ::prost::alloc::string::String,
    /// digest pertaining to a SmartContractInterfacePayload (containing all its details), originally generated by evm parser
    pub digest: ::prost::alloc::string::String,
}
